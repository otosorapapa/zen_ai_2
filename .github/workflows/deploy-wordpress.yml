name: Deploy WordPress Plugin

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies and build
        env:
          VITE_BASE_PATH: ./
        run: |
          npm ci
          npm run build

      - name: Guard dist output
        run: |
          test -f dist/index.html || (echo "dist/index.html not found" && exit 1)
          test -f dist/manifest.json || (echo "dist/manifest.json not found" && exit 1)

      - name: Assemble WordPress plugin bundle
        run: |
          rm -rf wordpress-plugin
          mkdir -p wordpress-plugin/ai-lp-embed
          cp -R deliverables/wp-plugin/ai-lp-embed/. wordpress-plugin/ai-lp-embed/
          rsync -av --delete dist/ wordpress-plugin/ai-lp-embed/dist/

      - name: Install sshpass
        run: sudo apt-get update -y && sudo apt-get install -y sshpass

      - name: Sanitize deployment secrets
        env:
          WP_HOST: ${{ secrets.WP_HOST }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_SSH_PASS: ${{ secrets.WP_SSH_PASS }}
          WP_REMOTE_PATH: ${{ secrets.WP_REMOTE_PATH }}
          WP_SSH_PORT: ${{ secrets.WP_SSH_PORT || '22' }}
        run: |
          sanitize_basic() {
            KEY="$1" python3 - <<'PY'
import os

key = os.environ["KEY"]
value = os.environ.get(key, "")
value = value.replace("\r", "").replace("\n", "").strip()
print(value, end="")
PY
          }

          sanitize_path() {
            KEY="$1" python3 - <<'PY'
import os
import re

key = os.environ["KEY"]
value = os.environ.get(key, "")
value = value.replace("\r", "").replace("\n", "").strip()
value = re.sub(r"/\s+", "/", value)
value = re.sub(r"\s+/", "/", value)
print(value, end="")
PY
          }

          echo "HOST_CLEAN=$(sanitize_basic WP_HOST)" >> "$GITHUB_ENV"
          echo "USER_CLEAN=$(sanitize_basic WP_USER)" >> "$GITHUB_ENV"
          echo "PASS_CLEAN=$(sanitize_basic WP_SSH_PASS)" >> "$GITHUB_ENV"
          echo "PORT_CLEAN=$(sanitize_basic WP_SSH_PORT)" >> "$GITHUB_ENV"
          echo "REMOTE_PATH_CLEAN=$(sanitize_path WP_REMOTE_PATH)" >> "$GITHUB_ENV"

      - name: Prepare remote directory
        run: |
          test -n "$REMOTE_PATH_CLEAN" || (echo "REMOTE_PATH_CLEAN is empty" && exit 1)
          sshpass -p "$PASS_CLEAN" ssh -p "$PORT_CLEAN" -o StrictHostKeyChecking=no "$USER_CLEAN@$HOST_CLEAN" "
            mkdir -p \"$REMOTE_PATH_CLEAN\" &&
            chmod 755 \"$REMOTE_PATH_CLEAN\"
          "

      - name: Rsync deploy
        run: |
          sshpass -p "$PASS_CLEAN" rsync -avz --delete \
            -e "ssh -p $PORT_CLEAN -o StrictHostKeyChecking=no" \
            wordpress-plugin/ "$USER_CLEAN@$HOST_CLEAN:$REMOTE_PATH_CLEAN/"

      - name: Show remote listing
        run: |
          sshpass -p "$PASS_CLEAN" ssh -p "$PORT_CLEAN" -o StrictHostKeyChecking=no "$USER_CLEAN@$HOST_CLEAN" "
            ls -la \"$REMOTE_PATH_CLEAN\" &&
            echo '== dist ==' &&
            ls -la \"$REMOTE_PATH_CLEAN/dist\" || true &&
            echo '== assets ==' &&
            ls -la \"$REMOTE_PATH_CLEAN/dist/assets\" || true
          "
