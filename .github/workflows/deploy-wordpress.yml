name: Deploy WordPress Plugin

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20'
      PLUGIN_SLUG: ai-lp-embed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies and build
        env:
          VITE_BASE_PATH: ./
        run: |
          npm ci
          npm run build

      - name: Guard dist output
        run: |
          test -f dist/index.html || (echo "dist/index.html not found" && exit 1)
          test -f dist/manifest.json || (echo "dist/manifest.json not found" && exit 1)

      - name: Assemble WordPress plugin bundle
        run: |
          rm -rf wordpress-plugin
          mkdir -p "wordpress-plugin/$PLUGIN_SLUG"
          cp -R "deliverables/wp-plugin/$PLUGIN_SLUG/." "wordpress-plugin/$PLUGIN_SLUG/"
          rsync -av --delete dist/ "wordpress-plugin/$PLUGIN_SLUG/dist/"

      - name: Install sshpass
        run: sudo apt-get update -y && sudo apt-get install -y sshpass

      - name: Sanitize deployment secrets
        env:
          WP_HOST: ${{ secrets.WP_HOST }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_SSH_PASS: ${{ secrets.WP_SSH_PASS }}
          WP_REMOTE_PATH: ${{ secrets.WP_REMOTE_PATH }}
          WP_SSH_PORT: ${{ secrets.WP_SSH_PORT || '22' }}
        run: |
          sanitize_basic() {
            KEY="$1" python3 -c "import os; key = os.environ['KEY']; value = os.environ.get(key, ''); value = value.replace('\\r', '').replace('\\n', '').strip(); print(value, end='')"
          }

          sanitize_path() {
            KEY="$1" python3 -c "import os, re; key = os.environ['KEY']; value = os.environ.get(key, ''); value = value.replace('\\r', '').replace('\\n', '').strip(); value = value.replace('\\\\', '/'); value = re.sub(r'/\\s+', '/', value); value = re.sub(r'\\s+/', '/', value); value = re.sub(r'/+', '/', value); print(value, end='')"
          }

          HOST_CLEAN="$(sanitize_basic WP_HOST)"
          USER_CLEAN="$(sanitize_basic WP_USER)"
          PASS_CLEAN="$(sanitize_basic WP_SSH_PASS)"
          PORT_CLEAN="$(sanitize_basic WP_SSH_PORT)"
          REMOTE_PATH_CLEAN="$(sanitize_path WP_REMOTE_PATH)"

          echo "HOST_CLEAN=$HOST_CLEAN" >> "$GITHUB_ENV"
          echo "USER_CLEAN=$USER_CLEAN" >> "$GITHUB_ENV"
          echo "PASS_CLEAN=$PASS_CLEAN" >> "$GITHUB_ENV"
          echo "PORT_CLEAN=$PORT_CLEAN" >> "$GITHUB_ENV"
          echo "REMOTE_PATH_CLEAN=$REMOTE_PATH_CLEAN" >> "$GITHUB_ENV"

          REMOTE_PLUGIN_PATH=$(PLUGIN_SLUG="$PLUGIN_SLUG" python3 -c $'import os\nslug = os.environ.get("PLUGIN_SLUG", "").strip()\nremote_path = os.environ.get("REMOTE_PATH_CLEAN", "")\nnormalized = remote_path.replace("\\\\", "/")\nif ":/" not in normalized and normalized.startswith("//"):\n    normalized = "/" + normalized.lstrip("/")\nprefix = ""\ntrimmed = normalized\nif normalized.startswith("/"):\n    prefix = "/"\n    trimmed = normalized[1:]\nelif len(normalized) >= 2 and normalized[1] == ":":\n    prefix = normalized[:2]\n    trimmed = normalized[2:]\nsegments = [segment for segment in trimmed.split("/") if segment]\nif segments and segments[-1] == slug:\n    segments = segments[:-1]\nif len(segments) >= 2 and segments[-2:] == ["wp-content", "plugins"]:\n    base_segments = segments\nelif segments and segments[-1] == "plugins":\n    base_segments = segments\nelif segments and segments[-1] == "wp-content":\n    base_segments = segments + ["plugins"]\nelse:\n    base_segments = segments + ["wp-content", "plugins"]\nfull_segments = base_segments + ([slug] if slug else [])\nresult = "/".join(full_segments)\nif prefix == "/":\n    result = "/" + result\nelif prefix:\n    result = prefix + "/" + result\nprint(result, end="")')

          echo "REMOTE_PLUGIN_PATH=$REMOTE_PLUGIN_PATH" >> "$GITHUB_ENV"
          echo "RSYNC_SOURCE_DIR=wordpress-plugin/$PLUGIN_SLUG/" >> "$GITHUB_ENV"

      - name: Prepare remote directory
        run: |
          test -n "$REMOTE_PLUGIN_PATH" || (echo "REMOTE_PLUGIN_PATH is empty" && exit 1)
          sshpass -p "$PASS_CLEAN" ssh -p "$PORT_CLEAN" -o StrictHostKeyChecking=no "$USER_CLEAN@$HOST_CLEAN" "
            mkdir -p \"$REMOTE_PLUGIN_PATH\" &&
            chmod 755 \"$REMOTE_PLUGIN_PATH\"
          "

      - name: Rsync deploy
        run: |
          sshpass -p "$PASS_CLEAN" rsync -avz --delete \
            -e "ssh -p $PORT_CLEAN -o StrictHostKeyChecking=no" \
            "$RSYNC_SOURCE_DIR" "$USER_CLEAN@$HOST_CLEAN:$REMOTE_PLUGIN_PATH/"

      - name: Show remote listing
        run: |
          sshpass -p "$PASS_CLEAN" ssh -p "$PORT_CLEAN" -o StrictHostKeyChecking=no "$USER_CLEAN@$HOST_CLEAN" "
            ls -la \"$REMOTE_PLUGIN_PATH\" &&
            echo '== dist ==' &&
            ls -la \"$REMOTE_PLUGIN_PATH/dist\" || true &&
            echo '== assets ==' &&
            ls -la \"$REMOTE_PLUGIN_PATH/dist/assets\" || true
          "
